{"version":3,"file":"index.mjs","sources":["../lib/qtrngo.js","../lib/apnorminv.js","../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport apnorminv from './apnorminv.js';\n\n\n// VARIABLES //\n\nvar VMAX = 120.0;\nvar c1 = 0.8843;\nvar c2 = 0.2368;\nvar c3 = 1.214;\nvar c4 = 1.208;\nvar c5 = 1.4142;\n\n\n// MAIN //\n\n/**\n* Calculates an initial percentile from the studentized range distribution.\n*\n* @private\n* @param {number} p - quantile\n* @param {number} v - degrees of freedom\n* @param {number} r - number of samples\n* @returns {number} initial percentile\n*/\nfunction qtrngo( p, v, r ) {\n\tvar q;\n\n\tvar t = apnorminv( 0.5 + ( 0.5 * p ) );\n\tif ( v < VMAX ) {\n\t\tt += ( ( t * t * t ) + t) / v / 4.0;\n\t}\n\tq = c1 - ( c2 * t );\n\tif ( v < VMAX ) {\n\t\tq -= ( c3 / v ) + ( c4 * t / v );\n\t}\n\treturn t * ( ( q * ln(r - 1.0) ) + c5 );\n}\n\n\n// EXPORTS //\n\nexport default qtrngo;\n","/* eslint-disable max-len, no-mixed-operators */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// VARIABLES //\n\n// Coefficients for P close to 0.5\nvar a0 = 3.3871328727963666080E0;\nvar a1 = 1.3314166789178437745E+2;\nvar a2 = 1.9715909503065514427E+3;\nvar a3 = 1.3731693765509461125E+4;\nvar a4 = 4.5921953931549871457E+4;\nvar a5 = 6.7265770927008700853E+4;\nvar a6 = 3.3430575583588128105E+4;\nvar a7 = 2.5090809287301226727E+3;\nvar b1 = 4.2313330701600911252E+1;\nvar b2 = 6.8718700749205790830E+2;\nvar b3 = 5.3941960214247511077E+3;\nvar b4 = 2.1213794301586595867E+4;\nvar b5 = 3.9307895800092710610E+4;\nvar b6 = 2.8729085735721942674E+4;\nvar b7 = 5.2264952788528545610E+3;\n\n// Coefficients for P not close to 0, 0.5 or 1.\nvar c0 = 1.42343711074968357734E0;\nvar c1 = 4.63033784615654529590E0;\nvar c2 = 5.76949722146069140550E0;\nvar c3 = 3.64784832476320460504E0;\nvar c4 = 1.27045825245236838258E0;\nvar c5 = 2.41780725177450611770E-1;\nvar c6 = 2.27238449892691845833E-2;\nvar c7 = 7.74545014278341407640E-4;\nvar d1 = 2.05319162663775882187E0;\nvar d2 = 1.67638483018380384940E0;\nvar d3 = 6.89767334985100004550E-1;\nvar d4 = 1.48103976427480074590E-1;\nvar d5 = 1.51986665636164571966E-2;\nvar d6 = 5.47593808499534494600E-4;\nvar d7 = 1.05075007164441684324E-9;\n\n// Coefficients for P near 0 or 1.\nvar e0 = 6.65790464350110377720E0;\nvar e1 = 5.46378491116411436990E0;\nvar e2 = 1.78482653991729133580E0;\nvar e3 = 2.96560571828504891230E-1;\nvar e4 = 2.65321895265761230930E-2;\nvar e5 = 1.24266094738807843860E-3;\nvar e6 = 2.71155556874348757815E-5;\nvar e7 = 2.01033439929228813265E-7;\nvar f1 = 5.99832206555887937690E-1;\nvar f2 = 1.36929880922735805310E-1;\nvar f3 = 1.48753612908506148525E-2;\nvar f4 = 7.86869131145613259100E-4;\nvar f5 = 1.84631831751005468180E-5;\nvar f6 = 1.42151175831644588870E-7;\nvar f7 = 2.04426310338993978564E-15;\n\n\n// MAIN //\n\n/**\n* Returns the normal deviate Z corresponding to a given lower tail area of `p`.\n*\n* @private\n* @param {Probability} p - lower tail area\n* @returns {number} normal deviate\n*/\nfunction apnorminv( p ) {\n\tvar ppnd;\n\tvar q;\n\tvar r;\n\n\tq = p - 0.5;\n\tif ( abs( q ) <= 0.425 ) {\n\t\tr = 0.180625 - ( q * q );\n\t\tppnd = q * (((((((a7 * r + a6) * r + a5) * r + a4) * r + a3) * r + a2) * r + a1) * r + a0) /\n\t\t\t(((((((b7 * r + b6) * r + b5) * r + b4) * r + b3) * r + b2) * r + b1) * r + 1.0);\n\t} else {\n\t\tif ( q < 0.0 ) {\n\t\t\tr = p;\n\t\t} else {\n\t\t\tr = 1.0 - p;\n\t\t}\n\t\tif ( r <= 0.0 ) {\n\t\t\tppnd = 0.0;\n\t\t} else {\n\t\t\tr = sqrt( -ln( r ) );\n\t\t\tif ( r <= 5.0 ) {\n\t\t\t\tr -= 1.6;\n\t\t\t\tppnd = (((((((c7 * r + c6) * r + c5) * r + c4) * r + c3) * r + c2) * r + c1) * r + c0) /\n\t\t\t\t\t(((((((d7 * r + d6) * r + d5) * r + d4) * r + d3) * r + d2) * r + d1) * r + 1.0);\n\t\t\t} else {\n\t\t\t\tr -= 5.0;\n\t\t\t\tppnd = (((((((e7 * r + e6) * r + e5) * r + e4) * r + e3) * r + e2) * r + e1) * r + e0) /\n\t\t\t\t\t(((((((f7 * r + f6) * r + f5) * r + f4) * r + f3) * r + f2) * r + f1) * r + 1.0);\n\t\t\t}\n\t\t\tif ( q < 0.0 ) {\n\t\t\t\tppnd = -ppnd;\n\t\t\t}\n\t\t}\n\t}\n\treturn ppnd;\n}\n\n\n// EXPORTS //\n\nexport default apnorminv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport prange from '@stdlib/stats-base-dists-studentized-range-cdf';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport qtrngo from './qtrngo.js';\n\n\n// VARIABLES //\n\nvar PCUT = 1e-8;\nvar JMAX = 28;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a studentized range distribution at probability `p` with `r` samples and `v` degrees of freedom.\n*\n* ## References\n*\n* -   Ferreira, D. F., Demetrico, C. G. B., Manly, B. F. J., and Machado, A. de A. 2007. \"Quantis da distribuição do máximo da amplitude estudentizada.\" _Rev. Mat. Est._, São Paulo, 25 (1): 117-135. <http://jaguar.fcav.unesp.br/RME/fasciculos/v25/v25_n1/A8_Daniel.pdf>.\n*\n* @param {Probability} p - input probability\n* @param {number} r - sample size for range (same for each group; must be greater than or equal to `2`)\n* @param {number} v - degrees of freedom (must be greater than or equal to `2`)\n* @param {PositiveInteger} [nranges=1] - number of groups whose maximum range is considered\n* @returns evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 3.0, 2.0 );\n* // returns ~0.0644\n*\n* @example\n* var y = quantile( 0.9, 17.0, 2.0 );\n* // returns ~0.913\n*\n* @example\n* var y = quantile( 0.5, 3.0, 2.0, 2 );\n* // returns ~0.01\n*/\nfunction qrange( p, r, v, nranges ) {\n\tvar aux;\n\tvar e1;\n\tvar e2;\n\tvar q1;\n\tvar q2;\n\tvar p1;\n\tvar p2;\n\tvar j;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( v ) ||\n\t\tr < 2.0 ||\n\t\tv < 2.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tif ( nranges === void 0 ) {\n\t\tnranges = 1;\n\t}\n\telse if ( !isPositiveInteger( nranges ) ) {\n\t\treturn NaN;\n\t}\n\tq1 = qtrngo( p, v, r );\n\twhile ( true ) {\n\t\tp1 = prange( q1, r, v, nranges );\n\t\tif ( p1 > p ) {\n\t\t\tq1 -= 0.4;\n\t\t}\n\t\tif ( q1 < 0.0 ) {\n\t\t\tq1 = 0.1;\n\t\t}\n\t\tif ( p1 < p ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\taux = q1;\n\tif ( abs( p1 - p ) < PCUT ) {\n\t\treturn NaN;\n\t}\n\tq2 = q1 + 0.5;\n\twhile ( true ) {\n\t\tp2 = prange( q2, r, v, nranges );\n\t\tif ( p2 < p ) {\n\t\t\tq2 += 0.4;\n\t\t}\n\t\tif ( q2 < 0.0 ) {\n\t\t\tq2 = 1.0;\n\t\t}\n\t\tif ( p2 > p ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ( q2 < q1 ) {\n\t\tq2 = q1 + 0.01;\n\t}\n\tj = 2;\n\twhile ( j <= JMAX ) {\n\t\tp2 = prange( q2, r, v, nranges );\n\t\te1 = p1 - p;\n\t\te2 = p2 - p;\n\t\tif ( e2 - e1 !== 0 ) {\n\t\t\taux = ( ( e2 * q1 ) - ( e1 * q2 ) ) / ( e2 - e1 );\n\t\t}\n\t\tif ( abs( e1 ) < abs( e2 ) ) {\n\t\t\tif ( abs( p1 - p ) < PCUT * 5.0 ) {\n\t\t\t\tj = JMAX + 2;\n\t\t\t}\n\t\t\tq1 = aux;\n\t\t\tp1 = prange( q1, r, v, nranges );\n\t\t} else {\n\t\t\tq1 = q2;\n\t\t\tp1 = p2;\n\t\t\tq2 = aux;\n\t\t}\n\t\tj += 1;\n\t}\n\treturn aux;\n}\n\n\n// EXPORTS //\n\nexport default qrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport prange from '@stdlib/stats-base-dists-studentized-range-cdf';\nimport abs from '@stdlib/math-base-special-abs';\nimport PINF from '@stdlib/constants-float64-pinf';\nimport qtrngo from './qtrngo.js';\n\n\n// VARIABLES //\n\nvar PCUT = 1e-8;\nvar JMAX = 28;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a studentized range distribution.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @param {number} r - sample size for range (same for each group; must be greater than or equal to `2`)\n* @param {number} v - degrees of freedom (must be greater than or equal to `2`)\n* @param {PositiveInteger} [nranges=1] - number of groups whose maximum range is considered\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 3.0, 3.0 );\n* var y = quantile( 0.5 );\n* // returns ~1.791\n*\n* y = quantile( 0.8 );\n* // returns ~3.245\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( r, v, nranges ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( v ) ||\n\t\tr < 2.0 ||\n\t\tv < 2.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( nranges === void 0 ) {\n\t\tnranges = 1;\n\t}\n\telse if ( !isPositiveInteger( nranges ) ) {\n\t\treturn NaN;\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a studentized range distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar aux;\n\t\tvar e1;\n\t\tvar e2;\n\t\tvar q1;\n\t\tvar q2;\n\t\tvar p1;\n\t\tvar p2;\n\t\tvar j;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\t\tq1 = qtrngo( p, v, r );\n\t\twhile ( true ) {\n\t\t\tp1 = prange( q1, r, v, nranges );\n\t\t\tif ( p1 > p ) {\n\t\t\t\tq1 -= 0.4;\n\t\t\t}\n\t\t\tif ( q1 < 0.0 ) {\n\t\t\t\tq1 = 0.1;\n\t\t\t}\n\t\t\tif ( p1 < p ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\taux = q1;\n\t\tif ( abs( p1 - p ) < PCUT ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tq2 = q1 + 0.5;\n\t\twhile ( true ) {\n\t\t\tp2 = prange( q2, r, v, nranges );\n\t\t\tif ( p2 < p ) {\n\t\t\t\tq2 += 0.4;\n\t\t\t}\n\t\t\tif ( q2 < 0.0 ) {\n\t\t\t\tq2 = 1.0;\n\t\t\t}\n\t\t\tif ( p2 > p ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( q2 < q1 ) {\n\t\t\tq2 = q1 + 0.01;\n\t\t}\n\t\tj = 2;\n\t\twhile ( j <= JMAX ) {\n\t\t\tp2 = prange( q2, r, v, nranges );\n\t\t\te1 = p1 - p;\n\t\t\te2 = p2 - p;\n\t\t\tif ( e2 - e1 !== 0 ) {\n\t\t\t\taux = ( ( e2 * q1 ) - ( e1 * q2 ) ) / ( e2 - e1 );\n\t\t\t}\n\t\t\tif ( abs( e1 ) < abs( e2 ) ) {\n\t\t\t\tif ( abs( p1 - p ) < PCUT * 5.0 ) {\n\t\t\t\t\tj = JMAX + 2;\n\t\t\t\t}\n\t\t\t\tq1 = aux;\n\t\t\t\tp1 = prange( q1, r, v, nranges );\n\t\t\t} else {\n\t\t\t\tq1 = q2;\n\t\t\t\tp1 = p2;\n\t\t\t\tq2 = aux;\n\t\t\t}\n\t\t\tj += 1;\n\t\t}\n\t\treturn aux;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a studentized range distribution.\n*\n* @module @stdlib/stats-base-dists-studentized-range-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-studentized-range-quantile';\n*\n* var y = quantile( 0.5, 3.0, 2.0 );\n* // returns ~1.908\n*\n* y = quantile( 0.1, 3.0, 4.0 );\n* // returns ~0.627\n*\n* var myquantile = quantile.factory( 3.0, 3.0 );\n*\n* y = myquantile( 0.5 );\n* // returns ~1.791\n*\n* y = myquantile( 0.8 );\n* // returns ~3.245\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["qtrngo","p","v","r","q","t","ppnd","abs","sqrt","ln","apnorminv","qrange","nranges","aux","e1","e2","q1","q2","p1","p2","j","isnan","NaN","PINF","isPositiveInteger","prange","PCUT","JMAX","factory","constantFunction","setReadOnly","main"],"mappings":"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"}